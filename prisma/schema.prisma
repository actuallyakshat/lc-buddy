generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum STATUS {
//   PENDING
//   RESOLVED
// }

// enum INVITE_PERMISSIONS {
//   ADMIN
//   EVERYONE
// }

// model User {
//   id                String             @id @default(cuid())
//   clerkId           String             @unique
//   email             String             @unique
//   name              String
//   leetcodeId        String             @default("")
//   invitePermissions INVITE_PERMISSIONS @default(ADMIN)
//   friendships       Friendship[]
//   Participant       Participant[]
//   createdAt         DateTime           @default(now())
//   updatedAt         DateTime           @updatedAt
// }

// model Friendship {
//   id              String            @id @default(cuid())
//   title           String
//   creatorId       String
//   creator         User              @relation(fields: [creatorId], references: [clerkId])
//   participants    Participant[]
//   pendingRequests PendingRequests[]
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt
// }

// model PendingRequests {
//   id           String     @id @default(cuid())
//   friendshipId String
//   senderId     String
//   receiverId   String
//   status       STATUS
//   friendship   Friendship @relation(fields: [friendshipId], references: [id])
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt
// }

// model Participant {
//   id           String      @id @default(cuid())
//   invitedBy    String
//   InvitedBy    User        @relation(fields: [invitedBy], references: [clerkId])
//   userId       String
//   friendshipId String
//   user         User        @relation(fields: [userId], references: [clerkId])
//   Friendship   Friendship? @relation(fields: [friendshipId], references: [id])
// }

enum MemberRole {
  ADMIN
  MEMBER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id          String       @id @unique
  email       String       @unique
  name        String
  leetcodeId  String       @default("")
  memberships Membership[]
  sentInvites Invite[]     @relation("Sender")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Group {
  id          String       @id @default(cuid())
  name        String
  description String?
  memberships Membership[]
  invites     Invite[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Membership {
  id        String     @id @default(cuid())
  userId    String
  groupId   String
  role      MemberRole @default(MEMBER)
  user      User       @relation(fields: [userId], references: [id])
  group     Group      @relation(fields: [groupId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, groupId])
}

model Invite {
  id         String       @id @default(cuid())
  groupId    String
  senderId   String
  receiverId String
  status     InviteStatus @default(PENDING)
  group      Group        @relation(fields: [groupId], references: [id])
  sender     User         @relation("Sender", fields: [senderId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}
